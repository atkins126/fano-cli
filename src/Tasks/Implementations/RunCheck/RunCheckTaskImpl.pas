(*!------------------------------------------------------------
 * Fano CLI Application (https://fanoframework.github.io)
 *
 * @link      https://github.com/fanoframework/fano-cli
 * @copyright Copyright (c) 2018 Zamrony P. Juhara
 * @license   https://github.com/fanoframework/fano-cli/blob/master/LICENSE (MIT)
 *------------------------------------------------------------- *)
unit RunCheckTaskImpl;

interface

{$MODE OBJFPC}
{$H+}

uses

    TaskOptionsIntf,
    TaskIntf,
    DecoratorTaskImpl;

type

    (*!--------------------------------------
     * Task that run other task only if
     * we are in project directory that is generated
     * by Fano CLI tools
     *------------------------------------------
     * This is to protect creating controller accidentally
     * outside non Fano-CLI generated project directory
     * structure.
     *---------------------------------------------
     * @author Zamrony P. Juhara <zamronypj@yahoo.com>
     *---------------------------------------*)
    TRunCheckTask = class(TDecoratorTask)
    protected
        function inFanoCliGeneratedProjectDir(const currDir : string) : boolean;
    public
        function run(
            const opt : ITaskOptions;
            const longOpt : shortstring
        ) : ITask; override;
    end;

implementation

uses

    SysUtils;

resourcestring
    sNotFanoDir = 'Current directory was not generated by Fano CLI. ' +
                  'Try create project first with --create-project.';
    sRunWithHelp = 'Run with --help option to view available task.';

    function TRunCheckTask.inFanoCliGeneratedProjectDir(const currDir : string) : boolean;
    begin
        result := directoryExists(currDir + 'fano') and
            directoryExists(currDir + 'src/Dependencies') and
            fileExists(currDir + 'build.sh') and
            fileExists(currDir + 'build.cfg') and
            fileExists(currDir + 'build.cfg.sample') and
            fileExists(currDir + 'src/bootstrap.pas') and
            fileExists(currDir + 'src/app.pas') and
            fileExists(currDir + 'src/Dependencies/dependencies.inc');
    end;

    function TRunCheckTask.run(
        const opt : ITaskOptions;
        const longOpt : shortstring
    ) : ITask;
    begin
        if (inFanoCliGeneratedProjectDir(getCurrentDir() + DirectorySeparator)) then
        begin
            actualTask.run(opt, longOpt);
        end else
        begin
            writeln(sNotFanoDir);
            writeln(sRunWithHelp);
        end;
        result := self;
    end;
end.
